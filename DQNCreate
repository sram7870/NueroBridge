import gym
import torch
import torch.nn as nn
import torch.optim as optim
import random
import numpy as np
from collections import deque
import matplotlib.pyplot as plt

# --- Hyperparameters ---
ENV_NAME = "CartPole-v1"
GAMMA = 0.99
LR = 0.001
BATCH_SIZE = 64
MEMORY_SIZE = 10000
EPSILON_START = 1.0
EPSILON_END = 0.01
EPSILON_DECAY = 0.995
TARGET_UPDATE = 10
NUM_EPISODES = 500
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# --- Q-Network ---
class DQN(nn.Module):
    def __init__(self, state_dim, action_dim):
        super(DQN, self).__init__()
        self.fc1 = nn.Linear(state_dim, 128)
        self.fc2 = nn.Linear(128, 128)
        self.fc3 = nn.Linear(128, action_dim)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return self.fc3(x)

# --- Prioritized Replay Memory ---
class PrioritizedReplayMemory:
    def __init__(self, capacity, alpha=0.6):
        self.capacity = capacity
        self.memory = []
        self.priorities = []
        self.alpha = alpha

    def push(self, transition, error):
        if len(self.memory) < self.capacity:
            self.memory.append(transition)
            self.priorities.append(error)
        else:
            idx = np.argmin(self.priorities)
            self.memory[idx] = transition
            self.priorities[idx] = error

    def sample(self, batch_size, beta=0.4):
        scaled_priorities = np.array(self.priorities) ** self.alpha
        probs = scaled_priorities / scaled_priorities.sum()
        indices = np.random.choice(len(self.memory), batch_size, p=probs)
        samples = [self.memory[idx] for idx in indices]
        weights = (len(self.memory) * probs[indices]) ** (-beta)
        weights /= weights.max()
        return samples, indices, torch.tensor(weights, dtype=torch.float32, device=DEVICE).unsqueeze(1)

    def update_priorities(self, indices, errors):
        for idx, error in zip(indices, errors):
            self.priorities[idx] = error.item()

    def __len__(self):
        return len(self.memory)

# --- Training ---
def train():
    env = gym.make(ENV_NAME)
    state_dim = env.observation_space.shape[0]
    action_dim = env.action_space.n

    policy_net = DQN(state_dim, action_dim).to(DEVICE)
    target_net = DQN(state_dim, action_dim).to(DEVICE)
    target_net.load_state_dict(policy_net.state_dict())
    target_net.eval()

    optimizer = optim.Adam(policy_net.parameters(), lr=LR)
    memory = PrioritizedReplayMemory(MEMORY_SIZE)

    epsilon = EPSILON_START
    rewards_history = []

    for episode in range(NUM_EPISODES):
        state = env.reset()[0]
        total_reward = 0
        done = False

        while not done:
            # --- Îµ-greedy action ---
            if random.random() < epsilon:
                action = env.action_space.sample()
            else:
                with torch.no_grad():
                    state_tensor = torch.tensor(state, dtype=torch.float32, device=DEVICE)
                    action = policy_net(state_tensor).argmax().item()

            next_state, reward, terminated, truncated, _ = env.step(action)
            done = terminated or truncated

            # --- Store with initial error ---
            state_tensor = torch.tensor(state, dtype=torch.float32, device=DEVICE)
            next_state_tensor = torch.tensor(next_state, dtype=torch.float32, device=DEVICE)
            with torch.no_grad():
                q_val = policy_net(state_tensor)[action]
                next_q = target_net(next_state_tensor).max()
                error = abs(reward + GAMMA * next_q * (1 - done) - q_val)
            memory.push((state, action, reward, next_state, done), error.item())

            state = next_state
            total_reward += reward

            # --- Sample batch and train ---
            if len(memory) >= BATCH_SIZE:
                batch, indices, weights = memory.sample(BATCH_SIZE)
                states, actions, rewards, next_states, dones = zip(*batch)

                states = torch.tensor(states, dtype=torch.float32, device=DEVICE)
                actions = torch.tensor(actions, dtype=torch.int64, device=DEVICE).unsqueeze(1)
                rewards = torch.tensor(rewards, dtype=torch.float32, device=DEVICE).unsqueeze(1)
                next_states = torch.tensor(next_states, dtype=torch.float32, device=DEVICE)
                dones = torch.tensor(dones, dtype=torch.float32, device=DEVICE).unsqueeze(1)

                # Double DQN target
                with torch.no_grad():
                    next_actions = policy_net(next_states).argmax(1).unsqueeze(1)
                    next_q_values = target_net(next_states).gather(1, next_actions)
                    target_q = rewards + GAMMA * next_q_values * (1 - dones)

                current_q = policy_net(states).gather(1, actions)
                loss = (weights * (current_q - target_q).pow(2)).mean()

                optimizer.zero_grad()
                loss.backward()
                optimizer.step()

                # Update priorities
                td_errors = (current_q - target_q).abs().detach()
                memory.update_priorities(indices, td_errors)

        epsilon = max(EPSILON_END, epsilon * EPSILON_DECAY)
        rewards_history.append(total_reward)

        if episode % TARGET_UPDATE == 0:
            target_net.load_state_dict(policy_net.state_dict())

        print(f"Episode {episode}, Reward: {total_reward}, Epsilon: {epsilon:.3f}")

    env.close()

    # --- Plot learning curve ---
    plt.plot(rewards_history)
    plt.xlabel("Episode")
    plt.ylabel("Reward")
    plt.title("DQN Learning Curve")
    plt.show()

if __name__ == "__main__":
    train()
